Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 _______________________________________________

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        
    if (nums.size() == 0) return { -1,-1 };
	if (nums.size() == 1)
	{
		if (nums[0] == target) return { 0,0 };
		else return { -1,-1 };
	}

	int low = 0, high = nums.size() - 1;

	if (nums[low] > target || nums[high] < target)
	{
		return { -1,-1 };
	}

	bool gotFirst = false, gotLast = false;
	int fst = -1, lst = -1;

	while (high >= low)
	{
		if (nums[low] == target && !gotFirst)
		{
			fst = low;
			gotFirst = true;
		}
		if (nums[high] == target && !gotLast)
		{
			lst = high;
			gotLast = true;
		}
		if (nums[low] > target)
		{
			if (gotFirst)
			{
				return { fst, low - 1 };
			}
			return { fst, fst };
		}
		if (nums[high] < target)
		{
			if (gotLast)
			{
				return { high + 1, lst };
			}
			return { lst, lst };
		}
		if (gotFirst && gotLast)
		{
			return { fst, lst };
		}
		++low;
		--high;
	}
    if (gotFirst)
	{
		return { fst, low - 1 };
	}
	if (gotLast)
	{
		return { high + 1, lst };
	}
	return {fst, lst};

    }
};