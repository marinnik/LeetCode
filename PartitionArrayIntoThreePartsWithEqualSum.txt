Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])

 

Example 1:

Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]
Output: true
Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1
Example 2:

Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]
Output: false
Example 3:

Input: arr = [3,3,6,5,-2,2,5,1,-9,4]
Output: true
Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4
________________________________________________________
class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& arr) {
        
        bool ans = false;
	int s1 = arr[0], s2 = 0, s3 = 0, ptr = 1;

	for (int i = 1; i < arr.size(); ++i)
	{
		s3 += arr[i];
	}
	while (ptr < arr.size() - 1)
	{
		if (s1 * 2 == s3)
		{
			ans = true;
			break;
		}
		s1 += arr[ptr];
		s3 -= arr[ptr];
		++ptr;
	}
	if (ans)
	{
		for (ptr; ptr < arr.size() - 1; ++ptr)
		{
			s2 += arr[ptr];
			s3 -= arr[ptr];
			if (s2 == s3)
			{
				return ans;
			}
		}
	}
	else
	{
		return ans;
	}
	return !ans;
    
    }
};