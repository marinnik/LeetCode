Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
____________________
class Solution {
int n;
    vector<int> dp;

    bool dfs(int i, string s, vector<string>& wordDict){
        if(i == n)
            return true;
        
        if(dp[i] != -1)
            return dp[i];

        bool ans = false;
        for(auto word : wordDict){
            int sz = word.size();
            if(sz > n-i)
                continue;
            string newWord = s.substr(i, sz);

            if(word == newWord)
                ans |= dfs(i+sz, s, wordDict);

            dp[i] = ans;
            if(ans == true)
                return ans;
        }

        return ans;
    }
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        n = s.size();

        dp = vector<int>(n, -1);
        return dfs(0, s, wordDict);
    }
};