Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 _______________________________________________

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        vector<int> hd;

	while (head)
	{
		hd.emplace_back(head->val);
		head = head->next;
	}

	auto iter = hd.cbegin();
	for (int i = hd.size() - 1; i >= 0; --i)
	{
		--n;
		if (n == 0)
		{
			hd.erase(iter + i);
			break;
		}
	}

	ListNode* ans = new ListNode(0);
	ListNode* temp = ans;

	for (int i = 0; i < hd.size(); ++i)
	{
		ans->next = new ListNode(hd[i]);
		ans = ans->next;
	}
	return temp->next;

    }
};