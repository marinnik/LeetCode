You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
_____________________________________________________________________________


class Solution {
public:
    int maxArea(vector<int>& height) {
        
        int sz = height.size();
	if (sz <= 1)
	{
		return 0;
	}
	if (sz == 2)
	{
		return min(height[0], height[1]);
	}
	
	int low = 0;
	int high = sz - 1;
	int ans = 0;
	while (low < high)
	{
		int width = high - low;
		int hght = min(height[low], height[high]);
		if (width * hght > ans)
		{
			ans = width * hght;
		}
		if (height[low] < height[high])
		{
			++low;
		}
		else if (height[low] > height[high]) { --high; }
		else
		{
			--high;
			++low;
		}
	}
	return ans;

    }
};