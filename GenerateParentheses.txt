Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 ___________________________________________________________

class Solution {
public:
    void parGen(int toOpen, int toClose, string& s, vector<string>& ans) 
    {
        if (toOpen == 0 && toClose == 0) 
        {
            ans.push_back(s);
            return;
        }
        if (toOpen > 0) 
        {
            s += "(";
            parGen(toOpen - 1, toClose, s, ans);
            s.pop_back();
        }
        if (toClose > 0 && toClose > toOpen) 
        {
            s += ")";
            parGen(toOpen, toClose - 1, s, ans);
            s.pop_back();
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string s = "(";
        int toOpen = n - 1;
        int toClose = n;
        parGen(toOpen, toClose, s, ans);
        return ans;
    }
};