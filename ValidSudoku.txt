Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.

___________________________________________________

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        
        vector<char> box1Control, box2Control, box3Control;
	for (int i = 0; i < board.size(); ++i)
	{
		if (i == 3 || i == 6)
		{
			box1Control.clear();
			box2Control.clear();
			box3Control.clear();
		}
		vector<char> row;
		for (int j = 0; j < board.size(); ++j)
		{
			if (board[i][j] == '.')
			{
				continue;
			}
			for (int k = 0; k < row.size(); ++k)
			{
				if (row[k] == board[i][j])
				{
					return false;
				}
			}
			row.emplace_back(board[i][j]);
			if (j < 3)
			{
				for (int k = 0; k < box1Control.size(); ++k)
				{
					if (box1Control[k] == board[i][j])
					{
						return false;
					}
				}
				box1Control.emplace_back(board[i][j]);
			}
			else if (j < 6)
			{
				for (int k = 0; k < box2Control.size(); ++k)
				{
					if (box2Control[k] == board[i][j])
					{
						return false;
					}
				}
				box2Control.emplace_back(board[i][j]);
			}
			else if (j < 9)
			{
				for (int k = 0; k < box3Control.size(); ++k)
				{
					if (box3Control[k] == board[i][j])
					{
						return false;
					}
				}
				if (board[i][j] != '.')
				box3Control.emplace_back(board[i][j]);
			}
		}
	}
	box1Control.clear();
	box2Control.clear();
	box3Control.clear();
	for (int i = 0; i < board.size(); ++i)
	{
		vector<char> column;
		for (int j = 0; j < board.size(); ++j)
		{
			if (board[j][i] == '.')
			{
				continue;
			}
			for (int k = 0; k < column.size(); ++k)
			{
				if (column[k] == board[j][i])
				{
					return false;
				}
			}
			column.emplace_back(board[j][i]);
		}
	}
	return true;
    
    }
};