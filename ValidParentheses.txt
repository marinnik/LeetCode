Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 ________________________________________________

class Solution {
public:
    bool isValid(string s) {
        bool isValid = true;
        vector<int> openedPenths;
	    char c; 

        for (int i = 0; i < s.length(); ++i)
	{
		if (!isValid) {
			break;
		}

		c = s[i];

		switch (c) {
		case '(':
		{
			openedPenths.push_back(1);
			break;
		}
		case '[':
		{
			openedPenths.push_back(2);
			break;
		}
		case '{':
		{
			openedPenths.push_back(3);
			break;
		}
		case ')':
		{
			if (openedPenths.empty() || openedPenths.back() != 1)
			{
				isValid = false;
				break;
			}
			else 
			{
				openedPenths.pop_back();
				break;
			}
		}
		case ']':
		{
			if (openedPenths.empty() || openedPenths.back() != 2)
			{
				isValid = false;
				break;
			}
			else
			{
				openedPenths.pop_back();
				break;
			}
		}
		case '}':
		{
			if (openedPenths.empty() || openedPenths.back() != 3)
			{
				isValid = false;
				break;
			}
			else
			{
				openedPenths.pop_back();
				break;
			}
		}
		}
	}

	if (!openedPenths.empty())
	{
		isValid = false;
	}


    return isValid;
    }
};