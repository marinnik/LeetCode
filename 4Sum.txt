Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
____________________________________________________

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
    if (nums.size() < 4)
	{
		return {};
	}
	
	vector<vector<int>> ans;

	sort(nums.begin(), nums.end());
	for (int i = 0; i < nums.size() - 3; ++i)
	{
		if (i > 0 && nums[i] == nums[i - 1]) {
			continue;
		}
		for (int j = nums.size() - 1; j > 2; --j)
		{
			if (j < nums.size() - 1 && nums[j] == nums[j + 1]) {
				continue;
			}
			int low = i + 1;
			int high = j - 1;
			while (high > low)
			{
				long long int sum = nums[i] + nums[j];

				if (sum + nums[low]+nums[high] > target)
				{
					--high;
				}
				else if (sum + nums[low] + nums[high] < target)
				{
					++low;
				}
				else
				{
					ans.push_back({ nums[i], nums[j], nums[low], nums[high] });
					int lastlow = nums[low], lasthigh = nums[high];
					while (low < high && nums[low] == lastlow)
					{
						++low;
					}
					while (low < high && nums[high] == lasthigh)
					{
						--high;
					}
				}
			}
		}
	}
	return ans;
    }
};