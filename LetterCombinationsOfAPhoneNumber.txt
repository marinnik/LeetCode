Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters is just like on the telephone buttons. Note that 1 does not map to any letters.

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
______________________________________________________________


class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if (digits.length() == 0)
	{
		return {};
	}

	vector<vector<char>> map{ {'2','a','b','c'},{'3','d','e','f'},{'4','g','h','i'},{'5','j','k','l'},{'6','m','n','o'},{'7','p','q','r','s'},{'8','t','u','v'},{'9','w','x','y','z'}};
	int comb = 1, numbBl = 1;

	for (int i = 0; i < digits.length(); ++i)
	{
		for (int j = 0; j < map.size(); ++j)
		{
			if (digits[i] == map[j][0])
			{
				comb *= (map[j].size() - 1);
			}
		}
	}

	vector<string> ans(comb);
	int numbRp = comb;

	for (int i = 0; i < digits.length(); ++i)
	{
		for (int j = 0; j < map.size(); ++j)
		{
			if (digits[i] == map[j][0])
			{
				int nEl = comb / numbBl;
				numbRp /= (map[j].size() - 1);  //количество повторов в блоke
				for (int m = 0; m < numbBl; ++m)
				{
					for (int k = 0; k < numbRp; ++k)
					{
						ans[m * nEl + k] += map[j][1];
						ans[m * nEl + k + numbRp] += map[j][2];
						ans[m * nEl + k + 2 * numbRp] += map[j][3];
						if (j == 5 || j == 7)
						{
							ans[m * nEl + k + 3 * numbRp] += map[j][4];
						}
					}
				}
				numbBl *= (map[j].size() - 1);
			}
		}
	}

        return ans;
    }
};

