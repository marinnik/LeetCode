You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []
_____________________________________________

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        if (lists.size() == 1)
	{
		return lists[0];
	}
	
	ListNode* ans = new ListNode(0);
	ListNode* temp = ans;
	
	int sz = lists.size();
	bool allDone = false;

	while (!allDone)
	{
		int minVal = INT_MAX, minPos = 0;
		for (int i = 0; i < sz; ++i) {
			if (lists[i] == NULL) continue;
			if (lists[i]->val <= minVal) {
				minPos = i;
				minVal = lists[i]->val;
				continue;
			}
		}
		if (minVal == INT_MAX && minPos == 0) break;
		temp->next = new ListNode(lists[minPos]->val);
		lists[minPos] = lists[minPos]->next;
		temp = temp->next;
	}
	return ans->next;

    }
};