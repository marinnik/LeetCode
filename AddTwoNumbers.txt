
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
_________________________________________________________

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
   ListNode* ans = new ListNode(0);
	ListNode* cr = ans;
	
	while (l1 && l2)
	{
		if (l1->val + l2->val < 10)
		{
			cr->next = new ListNode(l1->val + l2->val);
		}
		else
		{
			cr->next = new ListNode((l1->val + l2->val)%10);
			if (l1->next)
			{
				l1->next->val += 1;
			}
			else if(l2->next)
			{
				l2->next->val += 1;
			}
			else
			{
				l1->next = new ListNode(1);
			}
		}
		cr = cr->next;
		l1 = l1->next;
		l2 = l2->next;
	}

	while (l1)
	{
		if (l1->val >= 10)
		{
			l1->val = l1->val % 10;
			if (l1->next)
			{
				l1->next->val += 1;
			}
			else
			{
				l1->next = new ListNode(1);
			}
		}
		cr->next = new ListNode(l1->val);
		l1 = l1->next;
		cr = cr->next;
	}

	while (l2)
	{
		if (l2->val >= 10)
		{
			l2->val = l2->val % 10;
			if (l2->next)
			{
				l2->next->val += 1;
			}
			else
			{
				l2->next = new ListNode(1);
			}
		}
		cr->next = new ListNode(l2->val);
		l2 = l2->next;
		cr = cr->next;
	}

	return ans->next;

    }
};